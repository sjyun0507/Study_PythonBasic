# 사용자 함수 : 사용자가 직접 만든 함수

# 함수? 어떤 일을 수행하는 코드(명령)들을 하나로 묶어서 이름을 부여하고 필요할때 호출해서 사용할 수 있게 만든 것
# ex) range(), print(), round(), eval()...

# 함수 용어
# 1. 함수 정의 : 사용자 함수를 새로 만드는 것을 의미
# 2. 인수(argument) : 함수를 사용할 때에 전달하는 데이터
# 3. 매개변수(parameter) : 함수 내에서 인수의 값을 받아 저장하는 변수
# 4. 반환값(return값) : 함수의 결과값을 의미한다.
# 5. 함수 호출 : 만들어진 함수를 사용하는 것

'''
# 함수 정의
# 함수를 선언하는 것을 의미한다.
# def 라는 키워드를 사용해서 함수를 정의할 수 있다.
# 기본 형태
def 함수이름(매개변수):
    함수본문(함수의 실행코드)
    return 반환값

매개변수와 return(반한괎)은 생략할 수 있다.
'''


def hello():
    print('hello world')


'''
프로그램에게 함수를 인지하게 하는 것
'''

# 함수 호출
hello()

# 호출할 때마다 정의할 때 작성한 코드가 그대로 실행된다.
# 1) 매개변수 x ,결과값(반환값) x
# 함수이름()의 형태로 호출 및 사용된다.
hello()

# 2) 매개변수 o, 결과값(반환값) x
# 함수이름(data)의 형태로 호출 및 사용된다.
print("hello")


# 3) 매개변수 x, 결과값(반환값) o
# 함수이름()의 형태로 호출 및 사용되고, 결과값이 존재하기 때문에 변수에 값을 저장하거나 다른 함수 또는 식에 사용된다.
# 변수 = 함수이름()
# print(함수이름())

# 4) 매개변수 o, 결과값(반환값) o
# 함수이름(data)의 형태로 호출 및 사용되고, 결과값이 존재하기 때문에 변수에 값을 저장하거나 다른 함수 또는 식에 사용된다.
# 변수 = 함수이름(data)
# print(함수이름(data))

# 인수와 매개변수
# 함수로 전달되는 data를 인수라고 한다.
# 그 인수를 함수 내부에서 저장하는 변수를 매개변수라고 한다.

# 매개 변수가 있는 함수
def introduce(name, age):  # 함수를 실행할 때 받고 싶은 데이터 만큼 변수를 선언한다.
    print(f'내 이름은 {name}이고, 나이는 {age}입니다.')
    # 인수를 받았다고 가정하고 매개변수를 이용해 코드를 작성한다.


introduce("홍길동", 25)  # 내 이름은 홍길동이고, 나이는 25입니다.
introduce(25, "홍길동")  # 내 이름은 25이고, 나이는 홍길동입니다.
# 선언한 매개변수의 순서대로 입력한 인수의 data가 대입된다.

# introduce() 매개변수를 안적으면 오류 발생
# 함수를 정의할 때 매개변수를 선언하였다면 그 매개 변수 개수 만큼 인수를 전달해야 한다.

# 매개변수의 이름을 알고 있다면 순서 상관없이 매개변수를 지정해서 값을 전달할 수 있다.
introduce(age=20, name="홍길동")  # 내 이름은 홍길동이고, 나이는 20입니다.

# 2. 가변 매개변수
'''
함수에 전달 되는 인수의 개수가 정해져 있지 않을 때 가변 매개 변수를 사용한다. 선언형태는 매개변수를 선언할 때 * 를 달아서 표시
받은 인수들은 가변 매개변수에 튜플 형식으로 저장된다.
'''


def show(*args):
    print(args)


show("python")  # ('python',)
show("python", "java")  # ('python', 'java')
show("python", "java", "c")  # ('python', 'java', 'c')
show()  # ()


# 가변 매개 변수는 함수당 최대 1개만 존재할 수 있다.
# 기본 매개 변수와 사용한다면 가장 마지막 순서로 선언해야 한다.

def show2(data, *args):
    pass


# def show2(*args,data):
#     pass
# show2(1,2,3,4,5) 가변 매개변수를 앞에 두면 기본 매개변수가 인수를 받지 못함

#### 3. 디폴트 매개변수
'''
매개변수에 기본값을 지정해 두는 매개변수
기본적으로 많이 사용하는 디폴트값(기본값)이 존재하는 변수인 경우에 사용한다.
'''


def hello2(message="안녕하세요"):  # 매개변수를 선언할 때 기본값을 초기화한다
    print(message)


hello2()  # 안녕하세요! -- 매개변수에 대한 인수가 없는 경우 디폴트 값 사용
hello2("hello world")  # hello world -- 인수가 있는 경우에는 매개변수가 수정되어 실행된다.


# 기본 매개변수 보다 뒤쪽에 선언되어 있어야 한다.

# def hello3(message="안녕하세요!", name): 오류
#     print(message)


def hello3(name, message="안녕하세요!"):
    print(f'{name}님, {message}')


hello3("홍길동")  # 홍길동님, 안녕하세요!


def hello4(message="안녕하세요!", *name):
    print(f'{name}, {message}')


hello4()  # (), 안녕하세요!


# 디폴트 매개변수와 가변 매개변수는 필요에 따라 순서를 자유롭게 사용해도 된다.

# 반환값 return
# 함수의 호출 결과를 반환한다.

# return data
# 반환할 값이 없다면 함수 내부에서 return은 생략할 수 있다.
# return이 없다면 자동으로 None값이 반환된다.

def address():
    addr = "대구 중구 반월당 센트럴 타워"


print(address())  # None


def address():
    addr = "대구 중구 반월당 센트럴 타워"
    return addr


print(address())  # 대구 중구 반월당 센트럴 타워


### 2. return 값 다중 반환 : 반환 값을 여러개 반환할 수 있다.

def calc(num):
    return num * 2, num / 2, num % 2, num ** 2
# , 를 기준으로 여러개의 값을 작성하면 반환값을 여러 개 반환하는 효과를 얻을 수 있다.

po, div, vie, pow = calc(7)
print(po, div, vie, pow) #14 3.5 1 49
# 실제로 여러 개의 반환값을 반환하는 것이 아니라 파이썬의 언패킹 기능을 이용하여 여러 값을 반환하는 것 처럼 보인다.

print(calc(5)) #(10. 2.5, 1, 25)
# 여러 개의 데이터를 반환하는 것처럼 보이지만 튜플데이터를 생성할 때 ()를 생략해도 튜플로 인식하기 때문에
# 사실은 1개의 튜플 데이터를 반환하고 그 데이터를 언패킹한 것


#### 3 함수의 종료를 위한 return
# 반환값이 없는 경우에도 return을 사용할 수 있다.
# return 은 함수 내에서 반복문의 break와 비슷하게 사용할 수 있다.
# ----> return을 만나는 즉시 return 이 포함된 함수가 종료된다.

def charge(energy):
    if energy <= 0:
        print("0보다 작은 에너지는 충전할 수 없습니다.")
        return 100
    print(f"에너지가 {energy}만큼 충전되었습니다.")
charge(0) # 0보다 작은 에너지는 충전할 수 없습니다.
charge(100) # 에너지가 100만큼 충전되었습니다.
print(charge(0)) #100 --- 경우에 따라 원하는 Return 값을 다르게 정할 수 있다.

# 추가
# 파이썬의 함수는 객체이고 자료형이다.
# ---> 함수도 객체로 인식된다.

# 함수 내부에서 일시적으로 사용할 함수의 선언이 가능하다
def print_data(name):
    def print_great():
        return "안녕하세요!"
    print(f'{name}님 {print_great()}')
print_data("홍길동") # 홍길동님 안녕하세요!
# print_great() 함수 내부에서 정의된 함수는 함수 내부에서만 사용이 가능하다.
